class Solution {
public:
    int helper(int m, int n, int row, int col, vector<vector<int>>&arr,vector<vector<int>>&dp){
        if(row == m || col == n || arr[row][col] == 1) return 0;
        if(row == m -1 && col == n - 1) return 1;
        if(dp[row][col] != -1) return dp[row][col];

        dp[row][col] = helper(m, n, row + 1, col, arr, dp) + helper(m, n, row, col + 1, arr, dp);
        return dp[row][col];
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return helper(m, n, 0, 0, obstacleGrid,dp);
    }
};
