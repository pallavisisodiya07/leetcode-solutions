class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size(), count = 0;

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == '1'){
                    count++;
                    DFS(grid, i, j, n, m);
                }
            }
        }
        return count;
    }

    void DFS(vector<vector<char>>& grid, int i, int j, int n, int m){
        if(i < 0 || j < 0 || i > n -1 || j > m -1 || grid[i][j] == '0'){
            return;
        }
        grid[i][j] = '0';
        DFS(grid, i + 1, j, n, m);
        DFS(grid, i - 1, j, n, m);
        DFS(grid, i, j + 1, n, m);
        DFS(grid, i, j - 1, n, m);

    }
};
